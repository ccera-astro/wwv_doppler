options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: wwv_doppler
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: WWV Doppler Measurement
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: farray
  id: variable
  parameters:
    comment: ''
    value: '[f1,f2]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 612.0]
    rotation: 0
    state: true
- name: fc
  id: variable
  parameters:
    comment: Actual tuned center frequency
    value: (uf1+uf2)/2.0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1040, 532.0]
    rotation: 0
    state: true
- name: first_len
  id: variable
  parameters:
    comment: ''
    value: len(first_taps)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1648, 404.0]
    rotation: 0
    state: true
- name: first_taps
  id: variable_low_pass_filter_taps
  parameters:
    beta: '6.76'
    comment: The taps for the filter above
    cutoff_freq: 100e3
    gain: '1.0'
    samp_rate: samp_rate
    width: 90e3
    win: firdes.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1408, 228.0]
    rotation: 0
    state: true
- name: high_rate
  id: variable
  parameters:
    comment: 1st stage decimator output rate
    value: '250000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 20.0]
    rotation: 0
    state: true
- name: mid_rate
  id: variable
  parameters:
    comment: 2nd stage decimator output rate
    value: '2500'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 36.0]
    rotation: 0
    state: true
- name: par_decim
  id: variable
  parameters:
    comment: ''
    value: '10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1664, 916.0]
    rotation: 0
    state: true
- name: pll_limit
  id: variable
  parameters:
    comment: ''
    value: (7.5/(mid_rate/2.0))*math.pi
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 908.0]
    rotation: 0
    state: true
- name: pll_loop
  id: variable
  parameters:
    comment: ''
    value: math.pi/150
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [152, 908.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 10e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 20.0]
    rotation: 0
    state: enabled
- name: second_len
  id: variable
  parameters:
    comment: ''
    value: len(second_taps)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1736, 404.0]
    rotation: 0
    state: true
- name: second_taps
  id: variable_low_pass_filter_taps
  parameters:
    beta: '6.76'
    comment: The taps for the filter above
    cutoff_freq: mid_rate/2.2
    gain: '1.0'
    samp_rate: high_rate
    width: '3500'
    win: firdes.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1600, 220.0]
    rotation: 0
    state: true
- name: snr_fft_size
  id: variable
  parameters:
    comment: ''
    value: '512'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [168, 1148.0]
    rotation: 0
    state: true
- name: snr_out1
  id: variable_function_probe
  parameters:
    block_id: snr_probe1
    comment: ''
    function_args: ''
    function_name: level
    poll_rate: '5'
    value: '1.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1736, 1132.0]
    rotation: 0
    state: true
- name: snr_out2
  id: variable_function_probe
  parameters:
    block_id: snr_probe2
    comment: ''
    function_args: ''
    function_name: level
    poll_rate: '5'
    value: '1.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1744, 1388.0]
    rotation: 0
    state: true
- name: third_len
  id: variable
  parameters:
    comment: ''
    value: len(third_taps)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1848, 404.0]
    rotation: 0
    state: true
- name: third_taps
  id: variable_low_pass_filter_taps
  parameters:
    beta: '6.76'
    comment: The taps for the filter above
    cutoff_freq: '725'
    gain: '1.0'
    samp_rate: mid_rate
    width: '35'
    win: firdes.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1776, 228.0]
    rotation: 0
    state: true
- name: tp_out1
  id: variable_function_probe
  parameters:
    block_id: tp_probe1
    comment: ''
    function_args: ''
    function_name: level
    poll_rate: '5'
    value: '0.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1888, 1132.0]
    rotation: 0
    state: true
- name: tp_out2
  id: variable_function_probe
  parameters:
    block_id: tp_probe2
    comment: ''
    function_args: ''
    function_name: level
    poll_rate: '5'
    value: '0.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1912, 1380.0]
    rotation: 0
    state: true
- name: uf1
  id: variable
  parameters:
    comment: ''
    value: farray[0]+upvf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 612.0]
    rotation: 0
    state: true
- name: uf2
  id: variable
  parameters:
    comment: ''
    value: farray[1]+upvf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 612.0]
    rotation: 0
    state: true
- name: upv
  id: variable
  parameters:
    comment: ''
    value: 120e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 540.0]
    rotation: 0
    state: true
- name: analog_agc_xx_0
  id: analog_agc_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gain: '1.0'
    max_gain: '65536'
    maxoutbuf: '0'
    minoutbuf: '0'
    rate: 1e-4
    reference: '1.0'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 732.0]
    rotation: 0
    state: true
- name: analog_agc_xx_0_0
  id: analog_agc_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gain: '1.0'
    max_gain: '65536'
    maxoutbuf: '0'
    minoutbuf: '0'
    rate: 1e-4
    reference: '1.0'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 972.0]
    rotation: 0
    state: true
- name: analog_pll_refout_cc_0
  id: analog_pll_refout_cc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    max_freq: pll_limit
    maxoutbuf: '0'
    min_freq: -pll_limit
    minoutbuf: '0'
    w: math.pi/100
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 740.0]
    rotation: 0
    state: true
- name: analog_pll_refout_cc_0_0
  id: analog_pll_refout_cc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    max_freq: pll_limit
    maxoutbuf: '0'
    min_freq: -pll_limit
    minoutbuf: '0'
    w: math.pi/100
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [456, 972.0]
    rotation: 0
    state: true
- name: analog_quadrature_demod_cf_0
  id: analog_quadrature_demod_cf
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gain: ((1.0/(math.pi*2.0))*mid_rate)*(1.0/farray[0])*1.0e9
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 756.0]
    rotation: 0
    state: true
- name: analog_quadrature_demod_cf_0_0
  id: analog_quadrature_demod_cf
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gain: ((1.0/(math.pi*2.0))*mid_rate)*(1.0/farray[1])*1.0e9
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [680, 988.0]
    rotation: 0
    state: true
- name: bist
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: BIST on/off
    short_id: ''
    type: eng_float
    value: '0.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [824, 492.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 884.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 1100.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_1
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: snr_fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 1268.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_1_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: snr_fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [984, 1508.0]
    rotation: 0
    state: true
- name: blocks_keep_one_in_n_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: par_decim
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1184, 756.0]
    rotation: 0
    state: true
- name: blocks_keep_one_in_n_0_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: par_decim
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1192, 860.0]
    rotation: 0
    state: true
- name: blocks_keep_one_in_n_0_1
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: par_decim
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1232, 964.0]
    rotation: 0
    state: true
- name: blocks_keep_one_in_n_0_1_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: par_decim
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 1060.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: snr_fft_size
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 1276.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: snr_fft_size
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [440, 1532.0]
    rotation: 0
    state: true
- name: device
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Device string
    short_id: ''
    type: str
    value: '"airspy=0,linearity=1,bias=1"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 612.0]
    rotation: 0
    state: true
- name: f1
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Frequency 1
    short_id: ''
    type: eng_float
    value: 15e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 612.0]
    rotation: 0
    state: true
- name: f2
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Frequency 2
    short_id: ''
    type: eng_float
    value: 20e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 508.0]
    rotation: 0
    state: true
- name: fft_filter_xxx_0
  id: fft_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: int(high_rate/mid_rate)
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_delay: '0'
    taps: second_taps
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 156.0]
    rotation: 0
    state: true
- name: fft_filter_xxx_0_0
  id: fft_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_delay: '0'
    taps: third_taps
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [920, 180.0]
    rotation: 0
    state: true
- name: fft_filter_xxx_0_0_0
  id: fft_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_delay: '0'
    taps: third_taps
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [920, 372.0]
    rotation: 0
    state: true
- name: fft_filter_xxx_0_1
  id: fft_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: int(high_rate/mid_rate)
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_delay: '0'
    taps: second_taps
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 372.0]
    rotation: 0
    state: true
- name: fft_vxx_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: snr_fft_size
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(snr_fft_size)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [664, 1244.0]
    rotation: 0
    state: true
- name: fft_vxx_0_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: snr_fft_size
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(snr_fft_size)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [664, 1484.0]
    rotation: 0
    state: true
- name: freq_xlating_fft_filter_ccc_0
  id: freq_xlating_fft_filter_ccc
  parameters:
    affinity: ''
    alias: ''
    center_freq: uf1-fc
    comment: 'RF tuning is arranged to sit

      exactly half-way between

      F1 and F2

      This rotates F1 to baseband'
    decim: int(samp_rate/high_rate)
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_delay: '0'
    samp_rate: samp_rate
    taps: first_taps
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [440, 156.0]
    rotation: 0
    state: true
- name: freq_xlating_fft_filter_ccc_0_0
  id: freq_xlating_fft_filter_ccc
  parameters:
    affinity: ''
    alias: ''
    center_freq: uf2-fc
    comment: 'F tuning is arranged to sit

      exactly half-way between

      F1 and F2

      This rotates F2 to baseband'
    decim: int(samp_rate/high_rate)
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_delay: '0'
    samp_rate: samp_rate
    taps: first_taps
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 356.0]
    rotation: 0
    state: true
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import sys
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [320, 20.0]
    rotation: 0
    state: true
- name: import_0_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import math
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 20.0]
    rotation: 0
    state: true
- name: logtime
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Logging interval
    short_id: ''
    type: intx
    value: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 612.0]
    rotation: 0
    state: true
- name: note_0
  id: note
  parameters:
    alias: ''
    comment: 'We use a 3-stage filter to reduce CPU load

      The 1st stage is fairly "light"

      With the fine filtering ocurring at the last stage.'
    note: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 28.0]
    rotation: 0
    state: true
- name: note_1
  id: note
  parameters:
    alias: ''
    comment: 'Set ''gain'' to produce frequency estimate,

      in Hz, on the output.'
    note: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 868.0]
    rotation: 0
    state: true
- name: note_2
  id: note
  parameters:
    alias: ''
    comment: 'A low pass filter

      gives an estimate of the

      fixed frequency offset component'
    note: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1328, 620.0]
    rotation: 0
    state: true
- name: osmosdr_source_0
  id: osmosdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: device
    bb_gain0: '20'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: internal
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '0'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: fc
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: rfgain
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'False'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '20'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '0'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 172.0]
    rotation: 0
    state: enabled
- name: prefix
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Log file name prefix
    short_id: ''
    type: str
    value: '"wwv-"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [320, 612.0]
    rotation: 0
    state: true
- name: purge
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Purge time (days)
    short_id: ''
    type: eng_float
    value: '5.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1184, 484.0]
    rotation: 0
    state: true
- name: rfgain
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: RF Gain
    short_id: ''
    type: eng_float
    value: '40'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 612.0]
    rotation: 0
    state: true
- name: single_pole_iir_filter_xx_0
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: 1.0/(mid_rate*10)
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 772.0]
    rotation: 0
    state: true
- name: single_pole_iir_filter_xx_0_0
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: 1.0/(mid_rate*10)
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 996.0]
    rotation: 0
    state: true
- name: single_pole_iir_filter_xx_0_1
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: 1.0/(mid_rate*10)
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [952, 852.0]
    rotation: 0
    state: true
- name: single_pole_iir_filter_xx_0_1_0
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: 1.0/(mid_rate*10)
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1040, 1076.0]
    rotation: 0
    state: true
- name: single_pole_iir_filter_xx_1
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: 1.0/20.0
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: snr_fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 1252.0]
    rotation: 0
    state: true
- name: single_pole_iir_filter_xx_1_0
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: 1.0/20.0
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: snr_fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1224, 1468.0]
    rotation: 0
    state: true
- name: snr_estimator_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def tone_pwr(self,tone,fft,srate):\n\
      \        mid = len(fft)/2\n        mid = int(mid)\n        bw = srate/len(fft)\n\
      \        off = float(abs(tone))/float(bw)\n        off = int(off)\n        \n\
      \        if (tone >= 0):\n            st = mid+(off-1)\n            end = st+3\n\
      \        else:\n            st = mid-(off+1)\n            end = st+3\n     \
      \   \n        pwr = np.mean(fft[st:end])\n        return pwr\n\n    def __init__(self,\
      \ fftsize=512,srate=2500):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='FFT-based SNR estimator',   # will show\
      \ up in GRC\n            in_sig=[(np.float32,fftsize)],\n            out_sig=[np.float32,np.float32]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.fftsize\
      \ = fftsize\n        self.srate = srate\n        self.tpcount = 0\n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"Extract SNR estimate\"\
      \"\"\n        fs = self.fftsize\n        pace = float(self.srate) / float(self.fftsize)\n\
      \        #\n        # Determine bin size in Hz\n        #\n        binsize =\
      \ float(self.srate) / float(self.fftsize)\n        \n        #\n        # Determine\
      \ which offset-from-middle is 100Hz\n        # WWV has a 100Hz spectral artifact\
      \ from the\n        # 100Hz sub-carrer\n        #\n        hhz = int(100.0/binsize)\n\
      \        \n        #\n        # Determine offset of 500Hz tone\n        #\n\
      \        fhhz = int(500.0/binsize)\n        \n        #\n        # Determine\
      \ offset of 600Hz tone\n        #\n        shhz = int(600.0/binsize)\n     \
      \   \n        for x in range(len(output_items[0])):\n            v = input_items[0][x]\n\
      \            mid = int(self.fftsize/2)\n            #\n            # Centre\
      \ frequency\n            #\n            signal = self.tone_pwr(0.0,v,self.srate)\n\
      \            \n            #\n            # Noise components\n            #\n\
      \            n1 = self.tone_pwr(25.0,v,self.srate)\n            n2  = self.tone_pwr(-25.0,v,self.srate)\n\
      \            na = (n1+n2)/2.0\n            \n            #\n            # 100Hz\
      \ sub-carrer\n            #\n            hh = self.tone_pwr(100.0,v,self.srate)\n\
      \            hh += self.tone_pwr(-100.0,v,self.srate)\n            hh /= 2.0\n\
      \            \n            #\n            # 500Hz tone\n            #\n    \
      \        s500 = self.tone_pwr(500.0,v,self.srate)\n            s500 += self.tone_pwr(-500.0,v,self.srate)\n\
      \            s500 /= 2.0\n            \n            #\n            # 600Hz tone\n\
      \            #\n            s600 = self.tone_pwr(600.0,v,self.srate)\n     \
      \       s600 += self.tone_pwr(-600.0,v,self.srate)\n            s600 /= 2.0\n\
      \            \n            #\n            # 440Hz tone\n            #\n    \
      \        s440 = self.tone_pwr(440.0,v,self.srate)\n            s440 += self.tone_pwr(-440.0,v,self.srate)\n\
      \            s440 /= 2.0\n            \n            #\n            # Pick loudest\
      \ tone from 440,500,600\n            #\n            stone = max([s500,s600,s440])\n\
      \            \n\n            #\n            # Carrier/Noise (SNR-ish) estimate\n\
      \            #\n            snr = signal/na\n            \n            #\n \
      \           # Tones-present flag\n            #\n            # If the loudest\
      \ tone is at least 5 times the boise AND\n            #   the 100Hz tone is\
      \ also at least 5 times the noise\n            #\n            #\n          \
      \  if (stone/na > 3.5 and hh/na > 3.5):\n                self.tpcount = int(pace*20)\n\
      \            else:\n                self.tpcount -= 1\n\n            output_items[0][x]\
      \ = snr\n            output_items[1][x] = 1 if self.tpcount > 0 else 0\n   \
      \     return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    fftsize: '512'
    maxoutbuf: '0'
    minoutbuf: '0'
    srate: mid_rate
  states:
    _io_cache: ('FFT-based SNR estimator', 'blk', [('fftsize', '512'), ('srate', '2500')],
      [('0', 'float', 512)], [('0', 'float', 1), ('1', 'float', 1)], 'Embedded Python
      Block example - a simple multiply const', ['fftsize', 'srate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1488, 1252.0]
    rotation: 0
    state: true
- name: snr_estimator_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def tone_pwr(self,tone,fft,srate):\n\
      \        mid = len(fft)/2\n        mid = int(mid)\n        bw = srate/len(fft)\n\
      \        off = float(abs(tone))/float(bw)\n        off = int(off)\n        \n\
      \        if (tone >= 0):\n            st = mid+(off-1)\n            end = st+3\n\
      \        else:\n            st = mid-(off+1)\n            end = st+3\n     \
      \   \n        pwr = np.mean(fft[st:end])\n        return pwr\n\n    def __init__(self,\
      \ fftsize=512,srate=2500):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='FFT-based SNR estimator',   # will show\
      \ up in GRC\n            in_sig=[(np.float32,fftsize)],\n            out_sig=[np.float32,np.float32]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.fftsize\
      \ = fftsize\n        self.srate = srate\n        self.tpcount = 0\n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"Extract SNR estimate\"\
      \"\"\n        fs = self.fftsize\n        pace = float(self.srate) / float(self.fftsize)\n\
      \        #\n        # Determine bin size in Hz\n        #\n        binsize =\
      \ float(self.srate) / float(self.fftsize)\n        \n        #\n        # Determine\
      \ which offset-from-middle is 100Hz\n        # WWV has a 100Hz spectral artifact\
      \ from the\n        # 100Hz sub-carrer\n        #\n        hhz = int(100.0/binsize)\n\
      \        \n        #\n        # Determine offset of 500Hz tone\n        #\n\
      \        fhhz = int(500.0/binsize)\n        \n        #\n        # Determine\
      \ offset of 600Hz tone\n        #\n        shhz = int(600.0/binsize)\n     \
      \   \n        for x in range(len(output_items[0])):\n            v = input_items[0][x]\n\
      \            mid = int(self.fftsize/2)\n            #\n            # Centre\
      \ frequency\n            #\n            signal = self.tone_pwr(0.0,v,self.srate)\n\
      \            \n            #\n            # Noise components\n            #\n\
      \            n1 = self.tone_pwr(25.0,v,self.srate)\n            n2  = self.tone_pwr(-25.0,v,self.srate)\n\
      \            na = (n1+n2)/2.0\n            \n            #\n            # 100Hz\
      \ sub-carrer\n            #\n            hh = self.tone_pwr(100.0,v,self.srate)\n\
      \            hh += self.tone_pwr(-100.0,v,self.srate)\n            hh /= 2.0\n\
      \            \n            #\n            # 500Hz tone\n            #\n    \
      \        s500 = self.tone_pwr(500.0,v,self.srate)\n            s500 += self.tone_pwr(-500.0,v,self.srate)\n\
      \            s500 /= 2.0\n            \n            #\n            # 600Hz tone\n\
      \            #\n            s600 = self.tone_pwr(600.0,v,self.srate)\n     \
      \       s600 += self.tone_pwr(-600.0,v,self.srate)\n            s600 /= 2.0\n\
      \            \n            #\n            # 440Hz tone\n            #\n    \
      \        s440 = self.tone_pwr(440.0,v,self.srate)\n            s440 += self.tone_pwr(-440.0,v,self.srate)\n\
      \            s440 /= 2.0\n            \n            #\n            # Pick loudest\
      \ tone from 440,500,600\n            #\n            stone = max([s500,s600,s440])\n\
      \            \n\n            #\n            # Carrier/Noise (SNR-ish) estimate\n\
      \            #\n            snr = signal/na\n            \n            #\n \
      \           # Tones-present flag\n            #\n            # If the loudest\
      \ tone is at least 5 times the boise AND\n            #   the 100Hz tone is\
      \ also at least 5 times the noise\n            #\n            #\n          \
      \  if (stone/na > 3.5 and hh/na > 3.5):\n                self.tpcount = int(pace*20)\n\
      \            else:\n                self.tpcount -= 1\n\n            output_items[0][x]\
      \ = snr\n            output_items[1][x] = 1 if self.tpcount > 0 else 0\n   \
      \     return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    fftsize: '512'
    maxoutbuf: '0'
    minoutbuf: '0'
    srate: mid_rate
  states:
    _io_cache: ('FFT-based SNR estimator', 'blk', [('fftsize', '512'), ('srate', '2500')],
      [('0', 'float', 512)], [('0', 'float', 1), ('1', 'float', 1)], 'Embedded Python
      Block example - a simple multiply const', ['fftsize', 'srate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1464, 1500.0]
    rotation: 0
    state: true
- name: snr_probe1
  id: blocks_probe_signal_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1744, 1244.0]
    rotation: 0
    state: true
- name: snr_probe2
  id: blocks_probe_signal_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1744, 1500.0]
    rotation: 0
    state: true
- name: tp_probe1
  id: blocks_probe_signal_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1744, 1300.0]
    rotation: 0
    state: true
- name: tp_probe2
  id: blocks_probe_signal_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1744, 1556.0]
    rotation: 0
    state: true
- name: upvf
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Upconverter conversion frequency
    short_id: ''
    type: eng_float
    value: 120e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 516.0]
    rotation: 0
    state: true
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: filtered_rf1
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1144, 196.0]
    rotation: 0
    state: true
- name: virtual_sink_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: filtered_rf2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1144, 388.0]
    rotation: 0
    state: true
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: filtered_rf1
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 820.0]
    rotation: 0
    state: true
- name: virtual_source_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: filtered_rf2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 1028.0]
    rotation: 0
    state: true
- name: virtual_source_0_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: filtered_rf1
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 1268.0]
    rotation: 0
    state: true
- name: virtual_source_0_1_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: filtered_rf2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 1508.0]
    rotation: 0
    state: true
- name: wwv_doplog_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\nimport glob\nimport os\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Doppler Logger\"\"\"\n\n    def __init__(self, prefix=\"./\", lograte=10.0,\
      \ srate=1000, snr=1.0,tp=0.0,purge=5.0):  # only default arguments here\n  \
      \      \"\"\"arguments to this function show up as parameters in GRC\"\"\"\n\
      \        gr.sync_block.__init__(\n            self,\n            name='WWV Doppler\
      \ Logger',   # will show up in GRC\n            in_sig=[np.float32]*2,\n   \
      \         out_sig=None\n        )\n        # if an attribute with the same name\
      \ as a parameter is found,\n        # a callback is registered (properties work,\
      \ too).\n        self.prefix = prefix\n        self.lograte = lograte\n    \
      \    self.avg = 0.0\n        self.pavg = 0.0\n        self.acnt = 0\n      \
      \  self.now = time.time()\n        self.srate = srate\n        self.snr = 1.0\n\
      \        self.snravg = 1.0\n        self.cursnr = 1.0\n        self.snrcnt =\
      \ 0\n        self.tp = 0.0\n        self.lastpurge = self.now\n        self.DAY\
      \ = 86400\n        self.purge = purge\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"Log frequency offsets\"\"\"\n        if (self.cursnr != self.snr):\n\
      \            self.cursnr = self.snr\n            self.snravg += self.snr\n \
      \           self.snrcnt += 1\n        for x in range(len(input_items[0])):\n\
      \            self.avg += input_items[0][x]\n            self.pavg += input_items[1][x]\n\
      \            self.acnt += 1\n            if (self.acnt >= (self.srate * self.lograte)):\n\
      \                self.avg /= self.acnt\n                self.pavg /= self.acnt\n\
      \                self.acnt = 0\n                ltp = time.gmtime()\n      \
      \          d = \"%04d%02d%02d\" % (ltp.tm_year, ltp.tm_mon, ltp.tm_mday)\n \
      \               fn = self.prefix + d + \".csv\"\n                fp = open(fn,\
      \ \"a\")\n                db = np.log10(self.pavg+1.0e-14)*10.0\n          \
      \      if (self.snrcnt != 0):\n                    snra = self.snravg / self.snrcnt\n\
      \                    self.snrcnt = 0\n                    self.snravg = 0.0\n\
      \                else:\n                    snra = self.snr\n              \
      \  snra = np.log10(snra+1.0e-14)*10.0\n                fp.write (\"%02d,%02d,%02d,%f,%f,%f,%f\\\
      n\" % (ltp.tm_hour, ltp.tm_min, ltp.tm_sec, self.avg,db,snra,self.tp))\n   \
      \             fp.close()\n                self.avg = 0\n                self.pavg\
      \ = 0\n\n                #\n                # Time to purge old data\n     \
      \           #\n                if ((time.time() - self.lastpurge) > (self.DAY/24)):\n\
      \                    fl = glob.glob(self.prefix+\"*.csv\")\n               \
      \     self.lastpurge = time.time()\n                    for f in fl:\n     \
      \                   sts = os.stat(f)\n                        if ((time.time()\
      \ - sts.st_mtime) > (self.purge * self.DAY)):\n                            os.remove(f)\n\
      \  \n            \n        \n        return len(input_items[0])\n\n"
    affinity: ''
    alias: ''
    comment: ''
    lograte: logtime
    maxoutbuf: '0'
    minoutbuf: '0'
    prefix: prefix+"%-.2fMHz-" % (farray[0]/1.0e6)
    purge: purge
    snr: snr_out1
    srate: mid_rate/par_decim
    tp: tp_out1
  states:
    _io_cache: ('WWV Doppler Logger', 'blk', [('prefix', "'./'"), ('lograte', '10.0'),
      ('srate', '1000'), ('snr', '1.0'), ('tp', '0.0'), ('purge', '5.0')], [('0',
      'float', 1), ('1', 'float', 1)], [], 'Doppler Logger', ['lograte', 'prefix',
      'purge', 'snr', 'srate', 'tp'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1488, 788.0]
    rotation: 0
    state: true
- name: wwv_doplog_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\nimport glob\nimport os\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Doppler Logger\"\"\"\n\n    def __init__(self, prefix=\"./\", lograte=10.0,\
      \ srate=1000, snr=1.0,tp=0.0,purge=5.0):  # only default arguments here\n  \
      \      \"\"\"arguments to this function show up as parameters in GRC\"\"\"\n\
      \        gr.sync_block.__init__(\n            self,\n            name='WWV Doppler\
      \ Logger',   # will show up in GRC\n            in_sig=[np.float32]*2,\n   \
      \         out_sig=None\n        )\n        # if an attribute with the same name\
      \ as a parameter is found,\n        # a callback is registered (properties work,\
      \ too).\n        self.prefix = prefix\n        self.lograte = lograte\n    \
      \    self.avg = 0.0\n        self.pavg = 0.0\n        self.acnt = 0\n      \
      \  self.now = time.time()\n        self.srate = srate\n        self.snr = 1.0\n\
      \        self.snravg = 1.0\n        self.cursnr = 1.0\n        self.snrcnt =\
      \ 0\n        self.tp = 0.0\n        self.lastpurge = self.now\n        self.DAY\
      \ = 86400\n        self.purge = purge\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"Log frequency offsets\"\"\"\n        if (self.cursnr != self.snr):\n\
      \            self.cursnr = self.snr\n            self.snravg += self.snr\n \
      \           self.snrcnt += 1\n        for x in range(len(input_items[0])):\n\
      \            self.avg += input_items[0][x]\n            self.pavg += input_items[1][x]\n\
      \            self.acnt += 1\n            if (self.acnt >= (self.srate * self.lograte)):\n\
      \                self.avg /= self.acnt\n                self.pavg /= self.acnt\n\
      \                self.acnt = 0\n                ltp = time.gmtime()\n      \
      \          d = \"%04d%02d%02d\" % (ltp.tm_year, ltp.tm_mon, ltp.tm_mday)\n \
      \               fn = self.prefix + d + \".csv\"\n                fp = open(fn,\
      \ \"a\")\n                db = np.log10(self.pavg+1.0e-14)*10.0\n          \
      \      if (self.snrcnt != 0):\n                    snra = self.snravg / self.snrcnt\n\
      \                    self.snrcnt = 0\n                    self.snravg = 0.0\n\
      \                else:\n                    snra = self.snr\n              \
      \  snra = np.log10(snra+1.0e-14)*10.0\n                fp.write (\"%02d,%02d,%02d,%f,%f,%f,%f\\\
      n\" % (ltp.tm_hour, ltp.tm_min, ltp.tm_sec, self.avg,db,snra,self.tp))\n   \
      \             fp.close()\n                self.avg = 0\n                self.pavg\
      \ = 0\n\n                #\n                # Time to purge old data\n     \
      \           #\n                if ((time.time() - self.lastpurge) > (self.DAY/24)):\n\
      \                    fl = glob.glob(self.prefix+\"*.csv\")\n               \
      \     self.lastpurge = time.time()\n                    for f in fl:\n     \
      \                   sts = os.stat(f)\n                        if ((time.time()\
      \ - sts.st_mtime) > (self.purge * self.DAY)):\n                            os.remove(f)\n\
      \  \n            \n        \n        return len(input_items[0])\n\n"
    affinity: ''
    alias: ''
    comment: ''
    lograte: logtime
    maxoutbuf: '0'
    minoutbuf: '0'
    prefix: prefix+"%-.2fMHz-" % (farray[1]/1.0e6)
    purge: purge
    snr: snr_out2
    srate: mid_rate/par_decim
    tp: tp_out2
  states:
    _io_cache: ('WWV Doppler Logger', 'blk', [('prefix', "'./'"), ('lograte', '10.0'),
      ('srate', '1000'), ('snr', '1.0'), ('tp', '0.0'), ('purge', '5.0')], [('0',
      'float', 1), ('1', 'float', 1)], [], 'Doppler Logger', ['lograte', 'prefix',
      'purge', 'snr', 'srate', 'tp'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1488, 980.0]
    rotation: 0
    state: true
- name: xmlrpc_server_0
  id: xmlrpc_server
  parameters:
    addr: localhost
    alias: ''
    comment: ''
    port: '51015'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1416, 132.0]
    rotation: 0
    state: true
- name: zoom
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Zoom factor for frequency offset
    short_id: ''
    type: eng_float
    value: '1.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 492.0]
    rotation: 0
    state: true

connections:
- [analog_agc_xx_0, '0', analog_pll_refout_cc_0, '0']
- [analog_agc_xx_0_0, '0', analog_pll_refout_cc_0_0, '0']
- [analog_pll_refout_cc_0, '0', analog_quadrature_demod_cf_0, '0']
- [analog_pll_refout_cc_0_0, '0', analog_quadrature_demod_cf_0_0, '0']
- [analog_quadrature_demod_cf_0, '0', single_pole_iir_filter_xx_0, '0']
- [analog_quadrature_demod_cf_0_0, '0', single_pole_iir_filter_xx_0_0, '0']
- [blocks_complex_to_mag_squared_0, '0', single_pole_iir_filter_xx_0_1, '0']
- [blocks_complex_to_mag_squared_0_0, '0', single_pole_iir_filter_xx_0_1_0, '0']
- [blocks_complex_to_mag_squared_1, '0', single_pole_iir_filter_xx_1, '0']
- [blocks_complex_to_mag_squared_1_0, '0', single_pole_iir_filter_xx_1_0, '0']
- [blocks_keep_one_in_n_0, '0', wwv_doplog_1, '0']
- [blocks_keep_one_in_n_0_0, '0', wwv_doplog_1, '1']
- [blocks_keep_one_in_n_0_1, '0', wwv_doplog_2, '0']
- [blocks_keep_one_in_n_0_1_0, '0', wwv_doplog_2, '1']
- [blocks_stream_to_vector_0, '0', fft_vxx_0, '0']
- [blocks_stream_to_vector_0_0, '0', fft_vxx_0_0, '0']
- [fft_filter_xxx_0, '0', fft_filter_xxx_0_0, '0']
- [fft_filter_xxx_0_0, '0', virtual_sink_0, '0']
- [fft_filter_xxx_0_0_0, '0', virtual_sink_0_0, '0']
- [fft_filter_xxx_0_1, '0', fft_filter_xxx_0_0_0, '0']
- [fft_vxx_0, '0', blocks_complex_to_mag_squared_1, '0']
- [fft_vxx_0_0, '0', blocks_complex_to_mag_squared_1_0, '0']
- [freq_xlating_fft_filter_ccc_0, '0', fft_filter_xxx_0, '0']
- [freq_xlating_fft_filter_ccc_0_0, '0', fft_filter_xxx_0_1, '0']
- [osmosdr_source_0, '0', freq_xlating_fft_filter_ccc_0, '0']
- [osmosdr_source_0, '0', freq_xlating_fft_filter_ccc_0_0, '0']
- [single_pole_iir_filter_xx_0, '0', blocks_keep_one_in_n_0, '0']
- [single_pole_iir_filter_xx_0_0, '0', blocks_keep_one_in_n_0_1, '0']
- [single_pole_iir_filter_xx_0_1, '0', blocks_keep_one_in_n_0_0, '0']
- [single_pole_iir_filter_xx_0_1_0, '0', blocks_keep_one_in_n_0_1_0, '0']
- [single_pole_iir_filter_xx_1, '0', snr_estimator_1, '0']
- [single_pole_iir_filter_xx_1_0, '0', snr_estimator_2, '0']
- [snr_estimator_1, '0', snr_probe1, '0']
- [snr_estimator_1, '1', tp_probe1, '0']
- [snr_estimator_2, '0', snr_probe2, '0']
- [snr_estimator_2, '1', tp_probe2, '0']
- [virtual_source_0, '0', analog_agc_xx_0, '0']
- [virtual_source_0, '0', blocks_complex_to_mag_squared_0, '0']
- [virtual_source_0_0, '0', analog_agc_xx_0_0, '0']
- [virtual_source_0_0, '0', blocks_complex_to_mag_squared_0_0, '0']
- [virtual_source_0_1, '0', blocks_stream_to_vector_0, '0']
- [virtual_source_0_1_0, '0', blocks_stream_to_vector_0_0, '0']

metadata:
  file_format: 1
